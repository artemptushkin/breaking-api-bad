import au.com.dius.pact.provider.gradle.PactPublishTask
import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id "java"
    id "au.com.dius.pact" version "4.5.0"
    id "org.jetbrains.kotlin.plugin.spring" version "1.8.10"
    id "org.jetbrains.kotlin.jvm" version "1.8.10"
    id "org.springframework.boot" version "2.7.9"
    id "io.spring.dependency-management" version "1.1.0"
}

dependencyManagement {
    imports {
        mavenBom(SpringBootPlugin.BOM_COORDINATES)
    }
}

testing {
    suites {
        contractTest(JvmTestSuite) {
            testType.set(TestSuiteType.INTEGRATION_TEST)

            dependencies {
                implementation project()
            }

            sources {
                java {
                    srcDirs = ["src/contractTest/java", "src/contractTest/kotlin"]
                }
                resources {
                    srcDirs = ["src/contractTest/resources"]
                }
            }

            targets {
                configureEach {
                    testTask.configure {
                        options {}
                        useJUnitPlatform()
                        outputs.dirs(file("$buildDir/pacts")) //it makes pacts cacheable
                    }
                }
            }
        }
    }
}

dependencies {
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.springframework.boot:spring-boot-starter-web")

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    contractTestImplementation("org.springframework.boot:spring-boot-starter-web")
    contractTestImplementation("au.com.dius.pact.consumer:junit5:4.5.0")
    contractTestImplementation("org.springframework.boot:spring-boot-starter-test")
}

pact {
    broker {
        pactBrokerUrl = "https://saul-goodman.pactflow.io/"
        pactBrokerToken = project.properties["pactbroker.auth.token"] ?: project.properties["pact.broker.pactBrokerToken"]
    }
    publish {
        tags = (project.properties["pact.publish.tags"] ?: "").split(",")
        consumerVersion = project.properties["pact.publish.consumerVersion"]
    }
}

tasks.withType(PactPublishTask) {
    mustRunAfter(tasks.named("contractTest"))
}